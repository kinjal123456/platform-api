<?php

namespace Tests\Unit;

use Illuminate\Support\Arr;
use Tests\TestCase;
use Tests\TestDataFaker;

class OrderTest extends TestCase
{
    private $faker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = new TestDataFaker();
    }

    /**
     * New Order API unit test (with valid data).
     *
     * @return void
     */
    public function testNewOrderApiWithValidData()
    {
        $this->json('POST', 'api/order/create', $this->faker->prepareNewOrderValidData(), ['Accept' => 'application/json'])->assertOk()->assertHeader('Content-Type', 'application/json')->assertJsonStructure([
                'error',
                'success',
                'message',
                'apiError',
                'data',
            ])->assertJson([
                'error'    => false,
                'success'  => true,
                'message'  => __('sticky.new_order_create_success'),
                'apiError' => '',
            ]);
    }

    /**
     * New Order API unit test (with invalid data).
     *
     * @return void
     */
    public function testNewOrderApiWithInvalidData()
    {
        $this->json('POST', 'api/order/create', $this->faker->prepareNewOrderInvalidData(), ['Accept' => 'application/json'])->assertOk()->assertHeader('Content-Type', 'application/json')->assertJsonStructure([
            'error',
            'success',
            'message',
            'apiError',
            'data',
        ])->assertJson([
            'error'    => true,
            'success'  => false,
            'message'  => '',
            'apiError' => 'Shipping state must be 2 characters and valid US state',
        ]);
    }

    /**
     * Update Order API unit test (with valid data).
     *
     * @return void
     */
    public function testUpdateOrderApiWithValidData()
    {
        $this->json('POST', 'api/order/update', $this->faker->prepareUpdateOrderValidData(), ['Accept' => 'application/json'])->assertOk()->assertHeader('Content-Type', 'application/json')->assertJsonStructure([
            'error',
            'success',
            'message',
            'apiError',
            'data',
        ])->assertJson([
            'error'   => false,
            'success' => true,
            'message' => __('sticky.update_order_success'),
            'apiError' => '',
        ]);
    }

    /**
     * Update Order API unit test (with invalid data).
     *
     * @return void
     */
    public function testUpdateOrderApiWithInvalidData()
    {
        $this->json('POST', 'api/order/update', $this->faker->prepareUpdateOrderInvalidData(), ['Accept' => 'application/json'])->assertOk()->assertHeader('Content-Type', 'application/json')->assertJsonStructure([
            'error',
            'success',
            'message',
            'apiError',
            'data',
        ])->assertJson([
            'error'    => false,
            'success'  => true,
            'message'  => __('sticky.update_order_success'),
            'apiError' => '',
            'data' => [
                'response_code' => '911'
            ]
        ]);
    }

    /**
     * View Order API unit test (with valid data).
     *
     * @return void
     */
    public function testViewOrderAPIWithValidData()
    {
        $this->json('POST', 'api/order/view', $this->faker->prepareViewOrderValidData(), ['Accept' => 'application/json'])->assertOk()->assertHeader('Content-Type', 'application/json')->assertJsonStructure([
            'error',
            'success',
            'message',
            'apiError',
            'data',
        ])->assertJson([
            'error'    => false,
            'success'  => true,
            'message'  => __('sticky.view_order_success'),
            'apiError' => '',
        ]);
    }

    /**
     * View Order API unit test (with invalid data).
     *
     * @return void
     */
    public function testViewOrderAPIWithInvalidData()
    {
        $this->json('POST', 'api/order/view', $this->faker->prepareViewOrderInvalidData(), ['Accept' => 'application/json'])->assertOk()->assertHeader('Content-Type', 'application/json')->assertJsonStructure([
            'error',
            'success',
            'message',
            'apiError',
            'data',
        ])->assertJson([
            'error'    => true,
            'success'  => false,
            'message'  => sprintf(__('sticky.view_order_fails'), implode(',', Arr::get($this->faker->prepareViewOrderInvalidData(), 'order_id'))),
            'apiError' => '',
        ]);
    }
}
